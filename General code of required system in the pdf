#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CUSTOMERS 100
#define MAX_NAME_LENGTH 50
#define MAX_ADDRESS_LENGTH 100

// Structure for storing customer information
struct Customer {
    int id;
    char name[MAX_NAME_LENGTH];
    char dob[11]; // Date of birth in format YYYY-MM-DD
    char address[MAX_ADDRESS_LENGTH];
    long long int phone;
    float balance;
    char accountType[20];
    int cardNumber;
    float creditCardBalance;
};

// Array to store customer information
struct Customer customers[MAX_CUSTOMERS];
int numCustomers = 0;

// Function prototypes
void new_acc();
void transact();
void transfer();
void apply_for_card();
void pay_ur_credit_card();
void view_profile();
void bank_statement();
void erase();
void currency_converter_option();

int main() {
    int choice;

    do {
        printf("\nBank Management System Menu:\n");
        printf("1. New Account\n");
        printf("2. Transaction\n");
        printf("3. Transfer\n");
        printf("4. Apply for Card\n");
        printf("5. Pay Credit Card\n");
        printf("6. View Profile\n");
        printf("7. Bank Statement\n");
        printf("8. Delete Account\n");
        printf("9. Currency Conversion\n"); 
        printf("10. Exit");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                new_acc();
                break;
            case 2:
                transact();
                break;
            case 3:
                transfer();
                break;
            case 4:
                apply_for_card();
                break;
            case 5:
                pay_ur_credit_card();
                break;
            case 6:
                view_profile();
                break;
            case 7:
                bank_statement();
                break;
            case 8:
                erase();
                break;
            case 9:
                currency_converter_option();
                break; 
            case 10: 
                printf("Exiting program. Goodbye!\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 10);

    return 0;
}

void new_acc() {
    // Implementation for creating a new customer account
    // Ask for personal and banking details and store them in the customers array
 printf("Enter customer details:\n");
    printf("Name: ");
    scanf(" %[^\n]", customers[numCustomers].name);
    printf("Date of Birth (YYYY-MM-DD): ");
    scanf("%s", customers[numCustomers].dob);
    printf("Address: ");
    scanf(" %[^\n]", customers[numCustomers].address);
    printf("Phone Number: ");
    scanf("%lld", &customers[numCustomers].phone);
    printf("Initial Deposit: ");
    scanf("%f", &customers[numCustomers].balance);
    printf("Account Type (saving, current, fixed for 1 year, fixed for 2 years, fixed for 3 years): ");
    scanf(" %[^\n]", customers[numCustomers].accountType);
    printf("New account created successfully!\n");
    numCustomers++;
}

void transact() {
    // Implementation for depositing and withdrawing money from a customer account
int accountNumber;
    float amount;
    char type;

    printf("Enter account number: ");
    scanf("%d", &accountNumber);
    printf("Enter transaction type (d for deposit, w for withdrawal): ");
    scanf(" %c", &type);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            if (type == 'd') {
                printf("Enter deposit amount: ");
                scanf("%f", &amount);
                customers[i].balance += amount;
                printf("Deposit successful. New balance: %.2f\n", customers[i].balance);
            } else if (type == 'w') {
                printf("Enter withdrawal amount: ");
                scanf("%f", &amount);
                if (amount <= customers[i].balance) {
                    customers[i].balance -= amount;
                    printf("Withdrawal successful. New balance: %.2f\n", customers[i].balance);
                } else {
                    printf("Insufficient funds. Withdrawal failed.\n");
                }
            } else {
                printf("Invalid transaction type.\n");
            }
            return;
        }
    }
    printf("Account not found.\n");
}

void transfer() {
    // Implementation for transferring money between customer accounts
int senderAccount, receiverAccount;
    float amount;

    printf("Enter sender account number: ");
    scanf("%d", &senderAccount);
    printf("Enter receiver account number: ");
    scanf("%d", &receiverAccount);

    float *senderBalance = NULL;
    float *receiverBalance = NULL;

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == senderAccount) {
            senderBalance = &customers[i].balance;
        } else if (customers[i].id == receiverAccount) {
            receiverBalance = &customers[i].balance;
        }
    }

    if (senderBalance != NULL && receiverBalance != NULL) {
        printf("Enter transfer amount: ");
        scanf("%f", &amount);
        if (amount <= *senderBalance) {
            *senderBalance -= amount;
            *receiverBalance += amount;
            printf("Transfer successful.\n");
        } else {
            printf("Insufficient funds. Transfer failed.\n");
        }
    } else {
        printf("One or both accounts not found.\n");
    }

}

void apply_for_card() {
    // Implementation for creating a new credit card assigned to a customer account
 int accountNumber;
    printf("Enter account number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            customers[i].cardNumber = rand() % 1000000;
            customers[i].creditCardBalance = 0.0;
            printf("Credit card applied successfully. Card number: %d\n", customers[i].cardNumber);
            return;
        }
    }
    printf("Account not found.\n");
}

void pay_ur_credit_card() {
    // Implementation for checking credit card balance and paying installments
int accountNumber;
    float amount;
    printf("Enter account number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            printf("Current credit card balance: %.2f\n", customers[i].creditCardBalance);
            printf("Enter amount to pay: ");
            scanf("%f", &amount);
            if (amount <= customers[i].creditCardBalance) {
                customers[i].creditCardBalance -= amount;
                printf("Payment successful. New credit card balance: %.2f\n", customers[i].creditCardBalance);
            } else {
                printf("Amount exceeds credit card balance. Payment failed.\n");
            }
            return;
        }
    }
    printf("Account not found.\n");
}

void view_profile() {
    // Implementation for viewing customer's banking information
 int accountNumber;
    printf("Enter account number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            printf("Account Number: %d\n", customers[i].id);
            printf("Name: %s\n", customers[i].name);
            printf("Date of Birth: %s\n", customers[i].dob);
            printf("Address: %s\n", customers[i].address);
            printf("Phone Number: %lld\n", customers[i].phone);
            printf("Balance: %.2f\n", customers[i].balance);
            printf("Account Type: %s\n", customers[i].accountType);
            printf("Credit Card Number: %d\n", customers[i].cardNumber);
            printf("Credit Card Balance: %.2f\n", customers[i].creditCardBalance);
            return;
        }
    }
    printf("Account not found.\n");
}

void bank_statement() {
    // Implementation for generating a bank statement for a customer account
int accountNumber;
    printf("Enter account number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            // Implement bank statement generation for the specified account
            printf("Bank statement for account number %d:\n", accountNumber);
            // Include deposit and withdrawal details
            return;
        }
    }
    printf("Account not found.\n");

}

void erase() {
    // Implementation for deleting a customer account
    int accountNumber;
    printf("Enter account number to delete: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < numCustomers; i++) {
        if (customers[i].id == accountNumber) {
            // Move the last element to the position of the deleted element
            customers[i] = customers[numCustomers - 1];
            numCustomers--;
            printf("Account deleted successfully.\n");
            return;
        }
    }
    printf("Account not found.\n");

} 

void currency_converter_option() {
    // Currency codes and exchange rates relative to USD
    char* currency_codes[23] = {"USD", "EUR", "GBP", "JPY", "CNY", "INR", "CAD", "AUD", "CHF", "SAR", "EGP", "BRL", "KRW", "RUB", "TRY", "ZAR", "IDR", "NGN", "SEK", "NZD", "AED", "QAR", "KWD"};
    float exchange_rates[23] = {1, 0.87, 0.77, 108.79, 6.45, 75.02, 1.28, 1.38, 0.93, 3.75, 15.72, 5.31, 1132.76, 77.57, 13.75, 15.69, 14423.74, 405.36, 8.95, 8.94, 3.67, 3.64, 0.30};
    
    float amount, result;
    char currency_from[4], currency_to[4];

    printf("Enter the amount: ");
    scanf("%f", &amount);

    printf("Enter the currency to convert from (e.g., USD): ");
    scanf("%s", currency_from);

    printf("Enter the currency to convert to (e.g., EUR): ");
    scanf("%s", currency_to);

    // Find the index of the entered currencies in the currency_codes array
    int index_from = -1, index_to = -1;
    for (int i = 0; i < 23; i++) {
        if (strcmp(currency_from, currency_codes[i]) == 0) {
            index_from = i;
        }
        if (strcmp(currency_to, currency_codes[i]) == 0) {
            index_to = i;
        }
    }

    // Check if both currencies were found
    if (index_from == -1 || index_to == -1) {
        printf("Invalid currency input\n");
        return;
    }

    // Convert the amount using the provided exchange rates
    result = amount / exchange_rates[index_from] * exchange_rates[index_to];

    printf("Converted amount: %.2f %s\n", result, currency_to);
}

